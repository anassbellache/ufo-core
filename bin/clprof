#!/usr/bin/env python

import sys
import csv
import logging
import optparse
import numpy as np

class UncommentedFile:
    def __init__(self, f, commentchar='#'):
        self.f = f
        self.commentchar = commentchar

    def next(self):
        line = self.f.next()
        while line.startswith(self.commentchar):
            line = self.f.next()
        return line

    def __iter__(self):
        return self


def _show(plt, kernel_name, data, color):
    data = data.reshape((-1, 5))
    data[:,1:] = data[:,1:] * 1e-6
    row  = data[0,:]
    p    = plt.plot([row[3], row[4]], [row[0], row[0]], '%s-' % color, label=kernel_name)

    for row in data[1:,:]:
        plt.plot([row[3], row[4]], [row[0], row[0]], '%s-' % color)

    return p


def _print_stats(kernel, data, queues):
    data = data.reshape((-1, 5))
    n_rows = float(data.shape[0])

    data[:,1:] *= 1e-6

    # Get performance numbers in milli seconds
    submit_delay = data[:,2] - data[:,1]
    execution_delay = data[:,3] - data[:,2]
    execution = data[:,4] - data[:,3]

    # Get queue distribution
    dist = [(data[data[:,0] == q]).shape[0] / n_rows for q in queues]
    sdist = ':'.join([('%.1f' % q) for q in dist])

    print '%-20s % 12.4f % 12.4f % 12.4f % 12.4f %12s' % (kernel,
            np.mean(submit_delay),
            np.mean(execution_delay),
            np.mean(execution),
            np.sum(execution),
            sdist)

def parse_rows(reader):
    kernels = {}
    queues = {}

    for row in reader:
        name = row[0]
        queue = row[1]

        try:
            queue_number = queues[queue]
        except KeyError:
            queue_number = len(queues)
            queues[queue] = queue_number

        a = np.array([queue_number] + [float(x) for x in row[2:]])

        try:
            kernels[name] = np.hstack((kernels[name], a))
        except KeyError:
            kernels[name] = a

    return (kernels, queues)

def process_file(reader, options):
    kernels, queues = parse_rows(reader)

    header = '%-20s %12s %12s %12s %12s %12s' % ('Kernel', 'Submit Delay',
            'Exec Delay', 'Kernel Exec', 'Total Exec', 'Queue Dist')
    print header
    print '-'*len(header)

    for key in kernels:
        _print_stats(key, kernels[key], queues.values())

    if hasattr(options, 'enable_plot') and options.enable_plot:
        colors = ['b', 'r', 'g', 'm']

        for c, key in enumerate(kernels):
            p = _show(plt, key, kernels[key], colors[c])
            plt.legend([p], [key], loc=1)

        plt.show()

if __name__ == '__main__':
    parser = optparse.OptionParser(usage="Usage: %prog [options] FILE")

    try:
        import matplotlib.pyplot as plt

        parser.add_option('-p', '--plot',
                            action='store_true',
                            dest='enable_plot',
                            help='Plot the traces',
                            default=False)
    except ImportError:
        pass

    options, args = parser.parse_args()

    if not args:
        parser.print_help()
        sys.exit(0)

    try:
        with open(args[0]) as f:
            reader = csv.reader(UncommentedFile(f), delimiter=' ')
            process_file(reader, options)
    except IOError:
        print "Error: Could not read `%s'" % args[0]
